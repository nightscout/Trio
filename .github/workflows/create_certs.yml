name: 3. Create Certificates
run-name: Create Certificates (${{ github.ref_name }})

on:
  workflow_call:
  workflow_dispatch:

env:
  TEAMID: ${{ secrets.TEAMID }}
  GH_PAT: ${{ secrets.GH_PAT }}
  GH_TOKEN: ${{ secrets.GH_PAT }}
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
  FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
  FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}

jobs:
  validate:
    name: Validate
    uses: ./.github/workflows/validate_secrets.yml
    secrets: inherit

  create_certs:
    name: Certificates
    needs: validate
    runs-on: macos-15
    outputs:
      new_certificate_needed: ${{ steps.set_output.outputs.new_certificate_needed }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Patch Match Tables
        run: |
          TABLE_PRINTER_PATH=$(ruby -e 'puts Gem::Specification.find_by_name("fastlane").gem_dir')/match/lib/match/table_printer.rb
          if [ -f "$TABLE_PRINTER_PATH" ]; then
            sed -i '' '/puts(Terminal::Table.new(params))/d' "$TABLE_PRINTER_PATH"
          else
            echo "table_printer.rb not found"
            exit 1
          fi

      - name: Install Project Dependencies
        run: bundle install

      - name: Fastlane certs
        run: |
          echo "Running Fastlane certs lane..."
          bundle exec fastlane certs || true

      - name: Check and renew certificates if needed
        id: check_certs
        run: bundle exec fastlane check_and_renew_certificates

      - name: Set output and annotations
        id: set_output
        run: |
          CERT_STATUS_FILE="${{ github.workspace }}/fastlane/new_certificate_needed.txt"
          ENABLE_NUKE_CERTS="${{ vars.ENABLE_NUKE_CERTS }}"
          if [ -f "$CERT_STATUS_FILE" ]; then
            CERT_STATUS=$(tr -d '\r\n' < "$CERT_STATUS_FILE")
            echo "new_certificate_needed=$CERT_STATUS" >> $GITHUB_OUTPUT
          else
            echo "new_certificate_needed=false" >> $GITHUB_OUTPUT
          fi
          if [ "$CERT_STATUS" != "true" ] && [ "$ENABLE_NUKE_CERTS" != "true" ]; then
            echo "::notice::üîî Automated renewal disabled: ENABLE_NUKE_CERTS not 'true'."
          fi
          if [ "$CERT_STATUS" = "true" ] && [ "$ENABLE_NUKE_CERTS" != "true" ]; then
            echo "::error::‚ùå No valid certificate; skipped renewal because ENABLE_NUKE_CERTS not 'true'."
            exit 1
          fi

  nuke_certs:
    name: Nuke certificates
    needs:
      - validate
      - create_certs
    runs-on: macos-15
    if: ${{ (needs.create_certs.outputs.new_certificate_needed == 'true' && vars.ENABLE_NUKE_CERTS == 'true') || vars.FORCE_NUKE_CERTS == 'true' }}
    steps:
      - name: Output new_certificate_needed
        run: echo "new_certificate_needed=${{ needs.create_certs.outputs.new_certificate_needed }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: bundle install

      - name: Run Fastlane nuke_certs
        run: |
          set -e
          bundle exec fastlane nuke_certs

      - name: Recreate certificates
        run: |
          set -e
          bundle exec fastlane certs

      - name: Add success annotations
        if: ${{ success() }}
        run: |
          echo "::warning::üîß All certificates and profiles revoked and recreated."
          echo "::warning::üîß To renew other apps, run this workflow again."
          echo "::warning::üéâ Existing TestFlight builds will continue to work."
